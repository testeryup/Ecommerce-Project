import React, { useState, useEffect } from 'react';import { getWithdrawalRequests, createWithdrawalRequest } from '../../services/sellerService';import {     CreditCard,     Plus,     DollarSign,     Calendar,     Check,     Clock,     X,    TrendingUp,    Wallet,    ChevronLeft,    ChevronRight} from 'lucide-react';import { formatCurrency } from '../../ultils';import Loading from '../../components/Loading';import toast from 'react-hot-toast';const WithdrawModal = ({ isOpen, onClose, onSubmit, balance }) => {    const [amount, setAmount] = useState('');    const handleSubmit = (e) => {        e.preventDefault();        const withdrawAmount = parseInt(amount);        if (!withdrawAmount || withdrawAmount <= 0) {            toast.error('Vui lòng nhập số tiền hợp lệ');            return;        }        if (withdrawAmount > balance) {            toast.error('Số tiền rút không được vượt quá số dư');            return;        }        onSubmit(withdrawAmount);        setAmount('');    };    if (!isOpen) return null;    return (        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">            <div className="bg-white rounded-lg p-6 w-full max-w-md">                <h3 className="text-lg font-medium text-gray-900 mb-4">Tạo yêu cầu rút tiền</h3>                <form onSubmit={handleSubmit}>                    <div className="mb-4">                        <label className="block text-sm font-medium text-gray-700 mb-2">                            Số tiền muốn rút                        </label>                        <div className="relative">                            <input                                type="number"                                value={amount}                                onChange={(e) => setAmount(e.target.value)}                                className="w-full pl-10 pr-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500"                                placeholder="Nhập số tiền..."                                min="1"                                max={balance}                            />                            <DollarSign className="h-5 w-5 text-gray-400 absolute left-3 top-2.5" />                        </div>                        <p className="mt-2 text-sm text-gray-500">                            Số dư khả dụng: {formatCurrency(balance)}₫                        </p>                    </div>                    <div className="flex space-x-3 justify-end">                        <button                            type="button"                            onClick={onClose}                            className="px-4 py-2 text-sm font-medium text-gray-700 bg-gray-100 rounded-md hover:bg-gray-200"                        >                            Hủy                        </button>                        <button                            type="submit"                            className="px-4 py-2 text-sm font-medium text-white bg-indigo-600 rounded-md hover:bg-indigo-700"                        >                            Tạo yêu cầu                        </button>                    </div>                </form>            </div>        </div>    );};export default function SellerPayment() {    const [withdrawals, setWithdrawals] = useState(null);    const [loading, setLoading] = useState(true);    const [isWithdrawModalOpen, setIsWithdrawModalOpen] = useState(false);    const [filters, setFilters] = useState({        page: 1,        limit: 10,        status: 'all',        sortBy: 'createdAt',        sortOrder: 'desc'    });    const getStatusInfo = (status) => {        const statusMap = {            pending: { label: 'Chờ xử lý', color: 'bg-yellow-100 text-yellow-800', icon: Clock },            approved: { label: 'Đã duyệt', color: 'bg-green-100 text-green-800', icon: Check },            rejected: { label: 'Từ chối', color: 'bg-red-100 text-red-800', icon: X }        };        return statusMap[status] || { label: 'Không xác định', color: 'bg-gray-100 text-gray-800', icon: Clock };    };    const fetchWithdrawals = async () => {        try {            setLoading(true);            const response = await getWithdrawalRequests(filters);            if (response.errCode === 0) {                setWithdrawals(response.data);            } else {                toast.error('Không thể tải danh sách yêu cầu rút tiền');            }        } catch (error) {            console.error('Error fetching withdrawals:', error);            toast.error('Đã xảy ra lỗi khi tải danh sách');        } finally {            setLoading(false);        }    };    useEffect(() => {        fetchWithdrawals();    }, [filters]);    const handleCreateWithdrawal = async (amount) => {        try {            const response = await createWithdrawalRequest(amount);            if (response.errCode === 0) {                toast.success('Tạo yêu cầu rút tiền thành công');                setIsWithdrawModalOpen(false);                fetchWithdrawals();            } else {                toast.error(response.message || 'Không thể tạo yêu cầu rút tiền');            }        } catch (error) {            console.error('Error creating withdrawal:', error);            toast.error('Đã xảy ra lỗi');        }    };    const handleFilterChange = (key, value) => {        setFilters(prev => ({            ...prev,            [key]: value,            page: key === 'page' ? value : 1        }));    };    if (loading && !withdrawals) return <Loading />;    return (        <div className="space-y-6">            {/* Header */}            <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between">                <h1 className="text-2xl font-bold text-gray-900">Quản lý thanh toán</h1>                <button                    onClick={() => setIsWithdrawModalOpen(true)}                    className="inline-flex items-center px-4 py-2 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 mt-4 sm:mt-0"                >                    <Plus className="h-4 w-4 mr-2" />                    Tạo yêu cầu rút tiền                </button>            </div>            {/* Stats Cards */}            {withdrawals && (                <div className="grid grid-cols-1 md:grid-cols-3 gap-6">                    <div className="bg-white overflow-hidden shadow rounded-lg">                        <div className="p-5">                            <div className="flex items-center">                                <div className="flex-shrink-0">                                    <Wallet className="h-8 w-8 text-green-600" />                                </div>                                <div className="ml-5 w-0 flex-1">                                    <dl>                                        <dt className="text-sm font-medium text-gray-500 truncate">Số dư khả dụng</dt>                                        <dd className="text-2xl font-bold text-gray-900">{formatCurrency(withdrawals.balance)}₫</dd>                                    </dl>                                </div>                            </div>                        </div>                    </div>                    <div className="bg-white overflow-hidden shadow rounded-lg">                        <div className="p-5">                            <div className="flex items-center">                                <div className="flex-shrink-0">                                    <TrendingUp className="h-8 w-8 text-blue-600" />                                </div>                                <div className="ml-5 w-0 flex-1">                                    <dl>                                        <dt className="text-sm font-medium text-gray-500 truncate">Tổng đã rút</dt>                                        <dd className="text-2xl font-bold text-gray-900">{formatCurrency(withdrawals.totalWithdrawn)}₫</dd>                                    </dl>                                </div>                            </div>                        </div>                    </div>                    <div className="bg-white overflow-hidden shadow rounded-lg">                        <div className="p-5">                            <div className="flex items-center">                                <div className="flex-shrink-0">                                    <Clock className="h-8 w-8 text-yellow-600" />                                </div>                                <div className="ml-5 w-0 flex-1">                                    <dl>                                        <dt className="text-sm font-medium text-gray-500 truncate">Đang chờ xử lý</dt>                                        <dd className="text-2xl font-bold text-gray-900">{formatCurrency(withdrawals.pendingAmount)}₫</dd>                                    </dl>                                </div>                            </div>                        </div>                    </div>                </div>            )}            {/* Filters */}            <div className="bg-white shadow rounded-lg p-6">                <div className="flex flex-wrap gap-4">                    <select                        value={filters.status}                        onChange={(e) => handleFilterChange('status', e.target.value)}                        className="px-3 py-2 border border-gray-300 rounded-md text-sm focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500"                    >                        <option value="all">Tất cả trạng thái</option>                        <option value="pending">Chờ xử lý</option>                        <option value="approved">Đã duyệt</option>                        <option value="rejected">Từ chối</option>                    </select>                    <select                        value={filters.sortBy}                        onChange={(e) => handleFilterChange('sortBy', e.target.value)}                        className="px-3 py-2 border border-gray-300 rounded-md text-sm focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500"                    >                        <option value="createdAt">Ngày tạo</option>                        <option value="amount">Số tiền</option>                        <option value="status">Trạng thái</option>                    </select>                    <select                        value={filters.sortOrder}                        onChange={(e) => handleFilterChange('sortOrder', e.target.value)}                        className="px-3 py-2 border border-gray-300 rounded-md text-sm focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500"                    >                        <option value="desc">Mới nhất</option>                        <option value="asc">Cũ nhất</option>                    </select>                </div>            </div>            {/* Withdrawals Table */}            <div className="bg-white shadow overflow-hidden rounded-md">                <div className="overflow-x-auto">                    <table className="min-w-full divide-y divide-gray-200">                        <thead className="bg-gray-50">                            <tr>                                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">                                    Mã yêu cầu                                </th>                                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">                                    Số tiền                                </th>                                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">                                    Trạng thái                                </th>                                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">                                    Ngày tạo                                </th>                                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">                                    Ngày xử lý                                </th>                            </tr>                        </thead>                        <tbody className="bg-white divide-y divide-gray-200">                            {withdrawals?.requests?.map((request) => {                                const statusInfo = getStatusInfo(request.status);                                const StatusIcon = statusInfo.icon;                                                                return (                                    <tr key={request._id} className="hover:bg-gray-50">                                        <td className="px-6 py-4 whitespace-nowrap">                                            <div className="flex items-center">                                                <CreditCard className="h-5 w-5 text-gray-400 mr-3" />                                                <span className="text-sm font-medium text-gray-900">                                                    #{request._id.slice(-8)}                                                </span>                                            </div>                                        </td>                                        <td className="px-6 py-4 whitespace-nowrap">                                            <div className="text-sm font-medium text-gray-900">                                                {formatCurrency(request.amount)}₫                                            </div>                                        </td>                                        <td className="px-6 py-4 whitespace-nowrap">                                            <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${statusInfo.color}`}>                                                <StatusIcon className="h-3 w-3 mr-1" />                                                {statusInfo.label}                                            </span>                                        </td>                                        <td className="px-6 py-4 whitespace-nowrap">                                            <div className="flex items-center text-sm text-gray-500">                                                <Calendar className="h-4 w-4 mr-2" />                                                {new Date(request.createdAt).toLocaleDateString('vi-VN')}                                            </div>                                        </td>                                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">                                            {request.processedAt ?                                                 new Date(request.processedAt).toLocaleDateString('vi-VN') :                                                 '-'                                            }                                        </td>                                    </tr>                                );                            })}                        </tbody>                    </table>                </div>            </div>            {/* Pagination */}            {withdrawals?.pagination && (                <div className="bg-white px-4 py-3 flex items-center justify-between border-t border-gray-200 sm:px-6 rounded-lg shadow">                    <div className="flex-1 flex justify-between sm:hidden">                        <button                            className="relative inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed"                            disabled={!withdrawals.pagination.hasPrev}                            onClick={() => handleFilterChange('page', filters.page - 1)}                        >                            Trước                        </button>                        <button                            className="ml-3 relative inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed"                            disabled={!withdrawals.pagination.hasNext}                            onClick={() => handleFilterChange('page', filters.page + 1)}                        >                            Sau                        </button>                    </div>                    <div className="hidden sm:flex-1 sm:flex sm:items-center sm:justify-between">                        <div>                            <p className="text-sm text-gray-700">                                Trang {withdrawals.pagination.currentPage} / {withdrawals.pagination.totalPages}                            </p>                        </div>                        <div className="flex space-x-1">                            <button                                className="relative inline-flex items-center px-2 py-2 rounded-l-md border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed"                                disabled={!withdrawals.pagination.hasPrev}                                onClick={() => handleFilterChange('page', filters.page - 1)}                            >                                <ChevronLeft className="h-5 w-5" />                            </button>                            <button                                className="relative inline-flex items-center px-2 py-2 rounded-r-md border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed"                                disabled={!withdrawals.pagination.hasNext}                                onClick={() => handleFilterChange('page', filters.page + 1)}                            >                                <ChevronRight className="h-5 w-5" />                            </button>                        </div>                    </div>                </div>            )}            {/* Withdraw Modal */}            <WithdrawModal                isOpen={isWithdrawModalOpen}                onClose={() => setIsWithdrawModalOpen(false)}                onSubmit={handleCreateWithdrawal}                balance={withdrawals?.balance || 0}            />        </div>    );}